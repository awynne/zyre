/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/

#include "qzyre.h"

///
//  Copy-construct to return the proper wrapped c types
QZyreEvent::QZyreEvent (zyre_event_t *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = self;
}


///
//  Constructor: receive an event from the zyre node, wraps zyre_recv.
//  The event may be a control message (ENTER, EXIT, JOIN, LEAVE) or  
//  data (WHISPER, SHOUT).                                            
QZyreEvent::QZyreEvent (QZyre *self, QObject *qObjParent) : QObject (qObjParent)
{
    this->self = zyre_event_new (self->self);
}

///
//  Destructor; destroys an event instance
QZyreEvent::~QZyreEvent ()
{
    zyre_event_destroy (&self);
}

///
//  Returns event type, which is a zyre_event_type_t
zyre_event_type_t QZyreEvent::type ()
{
    zyre_event_type_t rv = zyre_event_type (self);
    return rv;
}

///
//  Return the sending peer's id as a string
const QString QZyreEvent::sender ()
{
    const QString rv = QString (zyre_event_sender (self));
    return rv;
}

///
//  Return the sending peer's public name as a string
const QString QZyreEvent::name ()
{
    const QString rv = QString (zyre_event_name (self));
    return rv;
}

///
//  Return the sending peer's ipaddress as a string
const QString QZyreEvent::address ()
{
    const QString rv = QString (zyre_event_address (self));
    return rv;
}

///
//  Returns the event headers, or NULL if there are none
QZhash * QZyreEvent::headers ()
{
    QZhash *rv = new QZhash (zyre_event_headers (self));
    return rv;
}

///
//  Returns value of a header from the message headers   
//  obtained by ENTER. Return NULL if no value was found.
const QString QZyreEvent::header (const QString &name)
{
    const QString rv = QString (zyre_event_header (self, name.toUtf8().data()));
    return rv;
}

///
//  Returns the group name that a SHOUT event was sent to
const QString QZyreEvent::group ()
{
    const QString rv = QString (zyre_event_group (self));
    return rv;
}

///
//  Returns the incoming message payload (currently one frame)
QZmsg * QZyreEvent::msg ()
{
    QZmsg *rv = new QZmsg (zyre_event_msg (self));
    return rv;
}

///
//  Self test of this class
void QZyreEvent::test (bool verbose)
{
    zyre_event_test (verbose);
    
}
/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
