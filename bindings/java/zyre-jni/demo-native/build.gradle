
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

version="0.1"
group="com.bosch.zyre"

mainClassName = "com.example.hellozyre.ZyreDemo"

def artifactBase = "${project.name}-${project.version}"

def os = System.properties['os.name'].toLowerCase()
def platform

if (os.contains("mac")) { 
    platform = "osx" 
}
else if (os.contains("linux")) { 
    platform = "x64linux" 
}
else if (os.contains("windows")) { 
    platform = "x64windows" 
}
else { 
    throw new RuntimeException("platform not supported: $os")    
}

println "Platform: $platform"

def zyreJniSoDir = "${project.rootDir}/../native/${platform}"
def zmqSoDir = "${project.rootDir}/../tmp/local/lib"

def nativeLibPath = "${zyreJniSoDir}:${zmqSoDir}"
def zyreSo = "${zmqSoDir}/libzyre.so"
def preloadPath   = "$zyreSo"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile "com.bosch.zyre:zyre-jni-core:0.1"
    
    // test
    testCompile 'junit:junit:4.12'
}

distZip {
    dependsOn {[copyNative]}

    into("$artifactBase") {
        from "./dist"
    }
}

task copyNativeOSX(type: Copy) {
    from "$zyreJniSoDir"
    from "$zmqSoDir"
    include "libsodium.dylib"
    include "libzmq.dylib"
    include "libczmq.dylib"
    include "libzyre.dylib"
    include "libzyre-jni.dylib"
    into "./dist/native/osx"
}

task copyNative() {
    if (platform.equals("osx")) {
        copyNativeOSX.execute()
    }
    else {
        println "copy native for $platform not supported yet"
    }
}


startScripts {
    doLast {
        def unixScript = file getUnixScript()
        unixScript.text = unixScript.text
            .replace('DEFAULT_JVM_ARGS=\"\"', 'DEFAULT_JVM_ARGS=\"-D$JAVA_LIBRARY_PATH\"')
    }
}
