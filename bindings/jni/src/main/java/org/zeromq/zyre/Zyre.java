/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
package org.zeromq.zyre;

public class Zyre implements AutoCloseable {
    static {
        try {
            System.loadLibrary ("zyrejni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    long self;

    /*
    Constructor, creates a new Zyre node. Note that until you start the
    node it is silent and invisible to other nodes on the network.     
    The node name is provided to other nodes during discovery. If you  
    specify NULL, Zyre generates a randomized node name from the UUID. 
    */
    native static long __init (String name);
    public Zyre (String name) {
        /*  TODO: if __init fails, self is null...  */
        self = __init (name);
    }
    /*
    Destructor, destroys a Zyre node. When you destroy a node, any
    messages it is sending or receiving will be discarded.        
    */
    native static void __destroy (long self);
    @Override
    public void close () {
        __destroy (self);
        self = 0;
    }
    /*
    Return our node UUID string, after successful initialization
    */
    native static String __uuid (long self);
    public String uuid (long self) {
        return Zyre.__uuid (self);
    }
    /*
    Return our node name, after successful initialization
    */
    native static String __name (long self);
    public String name (long self) {
        return Zyre.__name (self);
    }
    /*
    Set node header; these are provided to other nodes during discovery
    and come in each ENTER message.                                    
    */
    native static void __set_header (long self, String name, String format);
    public void set_header (long self, String name, String format) {
        Zyre.__set_header (self, name, format);
    }
    /*
    Set verbose mode; this tells the node to log all traffic as well as 
    all major events.                                                   
    */
    native static void __set_verbose (long self);
    public void set_verbose (long self) {
        Zyre.__set_verbose (self);
    }
    /*
    Set UDP beacon discovery port; defaults to 5670, this call overrides 
    that so you can create independent clusters on the same network, for 
    e.g. development vs. production. Has no effect after zyre_start().   
    */
    native static void __set_port (long self, int portNbr);
    public void set_port (long self, int portNbr) {
        Zyre.__set_port (self, portNbr);
    }
    /*
    Set UDP beacon discovery interval, in milliseconds. Default is instant
    beacon exploration followed by pinging every 1,000 msecs.             
    */
    native static void __set_interval (long self, long interval);
    public void set_interval (long self, long interval) {
        Zyre.__set_interval (self, interval);
    }
    /*
    Set network interface for UDP beacons. If you do not set this, CZMQ will
    choose an interface for you. On boxes with several interfaces you should
    specify which one you want to use, or strange things can happen.        
    */
    native static void __set_interface (long self, String value);
    public void set_interface (long self, String value) {
        Zyre.__set_interface (self, value);
    }
    /*
    By default, Zyre binds to an ephemeral TCP port and broadcasts the local 
    host name using UDP beaconing. When you call this method, Zyre will use  
    gossip discovery instead of UDP beaconing. You MUST set-up the gossip    
    service separately using zyre_gossip_bind() and _connect(). Note that the
    endpoint MUST be valid for both bind and connect operations. You can use 
    inproc://, ipc://, or tcp:// transports (for tcp://, use an IP address   
    that is meaningful to remote as well as local nodes). Returns 0 if       
    the bind was successful, else -1.                                        
    */
    native static int __set_endpoint (long self, String format);
    public int set_endpoint (long self, String format) {
        return Zyre.__set_endpoint (self, format);
    }
    /*
    Set-up gossip discovery of other nodes. At least one node in the cluster
    must bind to a well-known gossip endpoint, so other nodes can connect to
    it. Note that gossip endpoints are completely distinct from Zyre node   
    endpoints, and should not overlap (they can use the same transport).    
    */
    native static void __gossip_bind (long self, String format);
    public void gossip_bind (long self, String format) {
        Zyre.__gossip_bind (self, format);
    }
    /*
    Set-up gossip discovery of other nodes. A node may connect to multiple
    other nodes, for redundancy paths. For details of the gossip network  
    design, see the CZMQ zgossip class.                                   
    */
    native static void __gossip_connect (long self, String format);
    public void gossip_connect (long self, String format) {
        Zyre.__gossip_connect (self, format);
    }
    /*
    Start node, after setting header values. When you start a node it
    begins discovery and connection. Returns 0 if OK, -1 if it wasn't
    possible to start the node.                                      
    */
    native static int __start (long self);
    public int start (long self) {
        return Zyre.__start (self);
    }
    /*
    Stop node; this signals to other peers that this node will go away.
    This is polite; however you can also just destroy the node without 
    stopping it.                                                       
    */
    native static void __stop (long self);
    public void stop (long self) {
        Zyre.__stop (self);
    }
    /*
    Join a named group; after joining a group you can send messages to
    the group and all Zyre nodes in that group will receive them.     
    */
    native static int __join (long self, String group);
    public int join (long self, String group) {
        return Zyre.__join (self, group);
    }
    /*
    Leave a group
    */
    native static int __leave (long self, String group);
    public int leave (long self, String group) {
        return Zyre.__leave (self, group);
    }
    /*
    Receive next message from network; the message may be a control
    message (ENTER, EXIT, JOIN, LEAVE) or data (WHISPER, SHOUT).   
    Returns zmsg_t object, or NULL if interrupted                  
    */
    native static long __recv (long self);
    public long recv (long self) {
        return Zyre.__recv (self);
    }
    /*
    Send message to single peer, specified as a UUID string
    Destroys message after sending                         
    */
    native static int __whisper (long self, String peer, long msgP);
    public int whisper (long self, String peer, long msgP) {
        return Zyre.__whisper (self, peer, msgP);
    }
    /*
    Send message to a named group 
    Destroys message after sending
    */
    native static int __shout (long self, String group, long msgP);
    public int shout (long self, String group, long msgP) {
        return Zyre.__shout (self, group, msgP);
    }
    /*
    Send formatted string to a single peer specified as UUID string
    */
    native static int __whispers (long self, String peer, String format);
    public int whispers (long self, String peer, String format) {
        return Zyre.__whispers (self, peer, format);
    }
    /*
    Send formatted string to a named group
    */
    native static int __shouts (long self, String group, String format);
    public int shouts (long self, String group, String format) {
        return Zyre.__shouts (self, group, format);
    }
    /*
    Return zlist of current peer ids.
    */
    native static long __peers (long self);
    public long peers (long self) {
        return Zyre.__peers (self);
    }
    /*
    Return zlist of currently joined groups.
    */
    native static long __own_groups (long self);
    public long own_groups (long self) {
        return Zyre.__own_groups (self);
    }
    /*
    Return zlist of groups known through connected peers.
    */
    native static long __peer_groups (long self);
    public long peer_groups (long self) {
        return Zyre.__peer_groups (self);
    }
    /*
    Return the endpoint of a connected peer.
    */
    native static String __peer_address (long self, String peer);
    public String peer_address (long self, String peer) {
        return Zyre.__peer_address (self, peer);
    }
    /*
    Return the value of a header of a conected peer. 
    Returns null if peer or key doesn't exits.       
    */
    native static String __peer_header_value (long self, String peer, String name);
    public String peer_header_value (long self, String peer, String name) {
        return Zyre.__peer_header_value (self, peer, name);
    }
    /*
    Return socket for talking to the Zyre node, for polling
    */
    native static long __socket (long self);
    public long socket (long self) {
        return Zyre.__socket (self);
    }
    /*
    Return the Zyre version for run-time API detection
    */
    native static void __version (int major, int minor, int patch);
    public void version (int major, int minor, int patch) {
        Zyre.__version (major, minor, patch);
    }
    /*
    Self test of this class
    */
    native static void __test (boolean verbose);
    public void test (boolean verbose) {
        Zyre.__test (verbose);
    }
}
